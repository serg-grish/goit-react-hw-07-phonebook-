{"version":3,"sources":["Components/ContactList/ContactListItem/ContactListItem.module.css","Components/Filter/Filter.module.css","Components/ContactList/ContactList.module.css","redux/contacts/contactsActions.js","servises/contactsApi.js","redux/contacts/contactsOperations.js","redux/contacts/contactsReducer.js","redux/store.js","redux/contacts/contactsSelectors.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactListItem/ContactListItem.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","Components/App/App.js","index.js","Components/ContactForm/Contacts.module.css"],"names":["module","exports","filterContacts","createAction","getContactsFromApi","a","axios","get","data","deleteContactsFromApi","id","delete","addContactsInApi","contact","post","defaults","baseURL","fetchContacts","createAsyncThunk","contactsApi","contacts","addContacts","deleteContacts","contactsReducer","createReducer","fulfilled","state","payload","filter","_","filterReducer","loading","pending","rejected","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactReducer","devTools","getContacts","getVisibleContact","createSelector","normalizedFilter","toLowerCase","name","includes","phone","InputForm","useState","setName","number","setNumber","dispatch","useDispatch","useSelector","handleChange","e","currentTarget","value","className","s","form","onSubmit","preventDefault","map","alert","label","input","type","pattern","title","required","onChange","button","btnText","ContactItem","listItem","listItemText","onClick","ContactList","useEffect","list","Filter","filteredID","shortid","generate","htmlFor","filterLabel","target","filterInput","App","ReactDom","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.389cda24.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactListItem_listItem__2yqNO\",\"listItemText\":\"ContactListItem_listItemText__1y59s\",\"button\":\"ContactListItem_button__qpOuc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"Filter_filterLabel__2ZNSx\",\"filterInput\":\"Filter_filterInput__AdX91\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2cE9S\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const filterContacts = createAction('contact-filter');","import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://61957e7e74c1bd00176c6d8c.mockapi.io';\n\n\nexport async function getContactsFromApi() {\n  const { data } = await axios.get('/contacts');\n  return data;\n}\n\nexport async function deleteContactsFromApi(id) {\n  const { data } = await axios.delete(`/contacts/${id}`);\n  return data;\n}\n\nexport async function addContactsInApi(contact) {\n  const { data } = await axios.post('/contacts', contact);\n  return data;\n}","import * as contactsApi  from '../../servises/contactsApi';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\n\nexport const fetchContacts = createAsyncThunk(\n  'contact/fetchContacts',\n  async () => {\n    const contacts = await contactsApi.getContactsFromApi();\n    return contacts;\n  },\n);\n\nexport const addContacts = createAsyncThunk(\n  'contact/addContacts',\n  async (contact) => {\n    const data = await contactsApi.addContactsInApi(contact);\n    return data;\n  },\n);\n\nexport const deleteContacts = createAsyncThunk(\n  'contact/deleteContacts',\n  async (id) => {\n    await contactsApi.deleteContactsFromApi(id);\n    return id;\n  },\n);\n","import { createReducer, combineReducers } from '@reduxjs/toolkit';\n\nimport { filterContacts } from './contactsActions';\nimport {\n  fetchContacts,\n  deleteContacts,\n  addContacts,\n} from './contactsOperations';\n\nconst contactsReducer = createReducer([], {\n  \n  [addContacts.fulfilled]: (state, { payload }) => [...state, payload],\n  \n  [deleteContacts.fulfilled]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n \n  [fetchContacts.fulfilled]: (_, { payload }) => payload,\n});\n\nconst filterReducer = createReducer('', {\n  [filterContacts]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n \n  [addContacts.pending]: () => true,\n  [addContacts.rejected]: () => false,\n  [addContacts.fulfilled]: () => false,\n\n  [deleteContacts.pending]: () => true,\n  [deleteContacts.rejected]: () => false,\n  [deleteContacts.fulfilled]: () => false,\n  \n  [fetchContacts.pending]: () => true,\n  [fetchContacts.rejected]: () => false,\n  [fetchContacts.fulfilled]: () => false,\n});\n\nexport default combineReducers({\n  contacts: contactsReducer,\n  filter: filterReducer,\n  loading,\n});","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { logger } from 'redux-logger';\nimport contactReducer from './contacts/contactsReducer';\n\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nexport const store = configureStore({\n  reducer: contactReducer,\n  middleware,\n  devTools: true,\n});","\nimport { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = (state) => state.contacts;\nexport const getFilter = (state) => state.filter;\n\nexport const getVisibleContact = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(\n      (contact) =>\n        contact.name.toLowerCase().includes(normalizedFilter) ||\n        contact.phone.includes(filter),\n    );\n  },\n);","import { useState } from 'react';\nimport s from './Contacts.module.css';\nimport { addContacts } from '../../redux/contacts/contactsOperations'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from '../../redux/contacts/contactsSelectors';\n\n\nexport default function InputForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => getContacts(state));\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n const handleSubmit = e => {\n   e.preventDefault();\n   \n      if (contacts.map(contact => contact.name).includes(name)) {\n      alert(`Sorry,  ${name} is already in contacs.`);\n      return;\n    }\n   \n  \n   const addContactOnSubmit = {\n     name,\n     number,\n    //  id: shortid.generate(),\n   }\n   dispatch(addContacts(addContactOnSubmit));\n    setName('');\n    setNumber('');\n\n    };\n\n   \n\n  return (\n     <div className={s.form}>\n          <form onSubmit={handleSubmit} >\n          <label className={s.label} >\n            NAME\n            <input className={s.input}\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n              value={name}\n              onChange={handleChange}\n                        // id={nameInputId}\n            />\n          </label>\n\n          <label className={s.label} >\n            NUMBER\n            <input className={s.input}\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n              value={number}\n                        onChange={handleChange}\n                        // id={numberInputId}\n            />\n          </label>\n\n          <button className={s.button} type=\"submit\">\n            <span className={s.btnText}>Add contact</span>\n            </button>\n        </form>\n</div>\n   )\n}\n\n\n","import PropTypes from 'prop-types';\nimport s from './ContactListItem.module.css'\nimport { useDispatch } from 'react-redux';\nimport { deleteContacts } from '../../../redux/contacts/contactsOperations';\n\nexport default function ContactItem({ id, name, number }) {\n    const dispatch = useDispatch();\n    return (\n        <>\n        <li className={s.listItem}>\n            <span className={s.listItemText}>{name}</span>\n            <span className={s.listItemText}>{number}</span>\n             <button className={s.button} type=\"button\" onClick={() => dispatch(deleteContacts(id))} >Delete</button>    \n            </li>\n        </>\n        )\n};\n\nContactItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n   \n};","\nimport ContactItem from './ContactListItem/ContactListItem'\nimport { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\n import { fetchContacts } from '../../redux/contacts/contactsOperations';\nimport { getVisibleContact } from '../../redux/contacts/contactsSelectors';\nimport s from \"./ContactList.module.css\";\n\nexport default function ContactList() {\n    const contacts = useSelector(getVisibleContact);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <ul className={s.list}> {\n            contacts.map(({ id, name, number }) => (\n                <ContactItem\n                    key={id}\n                    id={id}\n                    name={name}\n                    number={number}\n          \n                />\n            ))\n        }\n       \n            </ul> \n    );\n};\nContactList.propTypes = {\n    contacts: PropTypes.array,\n}","import shortid from \"shortid\";\nimport s from './Filter.module.css';\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { filterContacts } from \"../../redux/contacts/contactsActions\";\n\nexport default function Filter() {\n    const filter = useSelector(state => state.filter);\n    const dispatch = useDispatch();\n    const filteredID = shortid.generate();\n    return (\n        <>\n            <label htmlFor={filteredID} className={s.filterLabel}>\n            <h3>Find contacts by name</h3>\n                <input type=\"text\"\n                    id={filteredID}\n                    value={filter}\n                    onChange={e => dispatch(filterContacts(e.target.value))}\n                    className={s.filterInput}\n                \n                />\n            \n            </label>\n        </>\n    );\n};\n\n// Filter.propTypes = {\n//     value: PropTypes.string,\n//     onchange: PropTypes.func,\n// }","import InputForm from '../ContactForm';\nimport { ContactList } from '../ContactList';\nimport Filter from '../Filter';\nimport './app.scss';\n\n\n\nexport default function App() {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <InputForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n  </>\n  );\n}\n","import React from 'react';\nimport ReactDom from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './redux/store';\n\nimport './index.css';\nimport App from './Components/App/App';\n\nReactDom.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import { Provider } from 'react-redux';\n// import data from './redux/store';\n// import { PersistGate } from 'redux-persist/integration/react';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <Provider store={data.store}>\n//       <PersistGate loading={null} persistor={data.persistor}>\n//         <App />\n//         </PersistGate>\n//   </Provider>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Contacts_form__2hfAr\",\"label\":\"Contacts_label__LzAMT\",\"input\":\"Contacts_input__1poBn\",\"button\":\"Contacts_button__3NsEU\"};"],"sourceRoot":""}